// #! /usr/bin/env dcli

// import 'dart:io';

// import 'package:dcli/dcli.dart';
// import 'package:dcli/src/version/version.g.dart';
// import 'package:mongo_dart/mongo_dart.dart';

// /// dcli script generated by:
// /// dcli create docker_push.dart
// ///
// /// See
// /// https://pub.dev/packages/dcli#-installing-tab-
// ///
// /// For details on installing dcli.
// ///

// void main(List<String> args) {
//   final parser = ArgParser()
//     ..addOption('mongohost',
//         help: 'mongo host', defaultsTo: 'localhost', mandatory: true)
//     ..addOption('mongoport',
//         help: 'mongo port', defaultsTo: '27017', mandatory: true)
//     ..addOption('database', help: 'database name', mandatory: true)
//     ..addOption('dbuser', help: 'db username', mandatory: true)
//     ..addOption('dbpassword', help: 'db password', mandatory: true)
//     ..addOption('unpubport',
//         help: 'unpub web port', defaultsTo: '4000', mandatory: true);

//   late final ArgResults parsed;
//   try {
//     parsed = parser.parse(args);
//   } on FormatException catch (e) {
//     printerr(red('Invalid argument: ${e.message}'));
//     showUsage(parser);
//     exit(1);
//   }

//   final mongohost = parsed['mongohost'] as String;
//   final mongoport = parsed['mongoport'] as String;
//   final database = parsed['database'] as String;
//   final dbuser = parsed['dbuser'] as String;
//   final dbpassword = parsed['dbpassword'] as String;

//   final unpubport = parsed['unpubport'] as String;

//   final projectRoot = DartProject.self.pathToProjectRoot;
//   final dockerfilePath = join(projectRoot, 'tool', 'unpub', 'Dockerfile');

//   waitForMongoPort(mongohost, mongoport, database);

//   const tag = 'noojee/unpub:1.0.0';
//   const latest = 'noojee/unpub:latest';

//   'docker  build -t $tag -t $latest -f $dockerfilePath .'.run;
//   'docker push noojee/unpub:$packageVersion'.run;
//   'docker push $tag'.run;
//   'docker push $latest'.run;
// }

// void waitForMongoPort(
//     String mongohost, String mongoport, String database) async {
//   final db = await Db.create('mongodb://$mongohost:$mongoport/$database');
// }

// void showUsage(ArgParser parser) {
//   print('Waits for mongo to start, Connects to mongo, '
//       'and creates an initial user');
//   print(parser.usage);
// }
